{"version":3,"sources":["images/croppedimage1201631-blood-bowl-2-background.jpg","components/signin/signin.component.js","components/register/register.component.js","components/create-team/createteam.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignIn","props","onNameChange","event","setState","signInName","target","value","onPasswordChange","signInPassword","state","onRouteChange","this","className","onChange","type","name","placeholder","onClick","Component","Register","CreateTeam","initialState","route","isSignedIn","user","id","password","teams","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,yE,kPC4C5BC,G,kBAxCf,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,WAAYF,EAAMG,OAAOC,SATzB,EAYnBC,iBAAmB,SAACL,GAChB,EAAKC,SAAS,CAACK,eAAgBN,EAAMG,OAAOC,SAX5C,EAAKG,MAAQ,CACTL,WAAY,GACZI,eAAgB,IAJL,E,sEAgBT,IACEE,EAAkBC,KAAKX,MAAvBU,cACR,OACI,6BACK,yBAAKE,UAAY,cACd,uCACA,uCAGA,2BAAOC,SAAYF,KAAKV,aACpBW,UAAY,cAAcE,KAAK,OAAOC,KAAO,WAAWC,YAAY,aACxE,2CACcL,KAAKF,MAAMD,gBAEzB,2BAAOK,SAAYF,KAAKJ,iBACxBK,UAAY,cAAcE,KAAK,WAAWC,KAAO,WAAWC,YAAY,aACxE,4BAAQJ,UAAW,gBAAnB,WACA,uBAAGK,QAAW,kBAAMP,EAAc,cAAlC,kB,GAlCKQ,cCSNC,G,uLAPR,OACC,4C,GAHeD,cCsBRE,G,MArBI,WACjB,OACI,yBAAKR,UAAY,eACb,4CAGA,2BAAOA,UAAY,gBAAgBE,KAAK,OAAOC,KAAO,WAAWC,YAAY,cAC7E,gDAEE,4BAAQV,MAAQ,MAAMM,UAAW,iBAC7B,4BAAQN,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,cAGN,4BAAQM,UAAY,oBAApB,kB,gBCVJS,G,MAAe,CACnBC,MAAO,SACPC,YAAY,EACZC,KAAM,CACJC,GAAI,GACJV,KAAM,GACNW,SAAU,GACVC,MAAO,MA8BIC,E,YAzBb,aAAe,IAAD,8BACZ,+CAIFlB,cAAgB,SAACY,GACf,EAAKnB,SAAS,CAACmB,MAAOA,KAJtB,EAAKb,MAAQY,EAFD,E,sEAUZ,OACE,yBAAKT,UAAU,OACf,yBAAKiB,IAAOC,IAAOC,IAAI,SACA,WAArBpB,KAAKF,MAAMa,MAAqB,kBAAC,EAAD,CAAQZ,cAAeC,KAAKD,gBACrC,WAArBC,KAAKF,MAAMa,MAAqB,kBAAC,EAAD,MACV,aAArBX,KAAKF,MAAMa,MAAuB,kBAAC,EAAD,MAAe,U,GAhB1CJ,aCREc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3882cd3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/croppedimage1201631-blood-bowl-2-background.4c384a3e.jpg\";","import React, { Component } from 'react';\nimport './signin.style.css';\n\nclass SignIn extends Component {\nconstructor(props) {\n    super(props);\n    this.state = {\n        signInName: '',\n        signInPassword: ''\n    }\n}\n\nonNameChange = (event) => {\n    this.setState({signInName: event.target.value})\n}\n\nonPasswordChange = (event) => {\n    this.setState({signInPassword: event.target.value})\n}\n\nrender() {\n    const { onRouteChange } = this.props;\n    return (\n        <div>\n             <div className = 'signInForm'>\n                <h2>sign in</h2>\n                <label>\n                    name\n                </label>\n                <input onChange = {this.onNameChange} \n                    className = 'signInInput' type=\"text\" name = 'username' placeholder=\"username\" />\n                <label>\n                    password {this.state.signInPassword}\n                </label>  \n                <input onChange = {this.onPasswordChange} \n                className = 'signInInput' type=\"password\" name = 'password' placeholder=\"password\" />\n                <button className ='signInSubmit'>sign in</button>\n                <p onClick = {() => onRouteChange('register')}>register</p>\n            </div>\n       </div>\n    );\n}\n}\n\nexport default SignIn;\n","import React, { Component } from 'react';\nimport './register.style.css';\n\nclass Register extends Component {\n   render() {\n       return (\n        <h1>register</h1>\n\n       )\n   }\n}\n\nexport default Register;","import React from 'react';\nimport './createteam.style.css'\n\n\nconst CreateTeam = () => {\n  return (\n      <div className = 'addTeamForm'>\n          <label>\n            team name\n          </label>\n          <input className = 'teamNameInput' type=\"text\" name = 'teamName' placeholder=\"team name\" />\n          <label>\n            Pick your team\n            <select value = \"orc\" className ='raceSelection'>\n                <option value=\"orc\">Orc</option>\n                <option value=\"human\">Human</option>\n                <option value=\"darkelf\">Dark Elf</option>\n            </select>\n          </label>  \n          <button className = 'createTeamButton' \n          >Create Team</button>\n      </div>\n  );\n}\n\nexport default CreateTeam;\n\n\n\n\n","import React, { Component } from 'react';\nimport SignIn from './components/signin/signin.component.js';\nimport Register from './components/register/register.component.js';\nimport CreateTeam from './components/create-team/createteam.component.js';\nimport logo from './images/croppedimage1201631-blood-bowl-2-background.jpg';\n\n\nimport './App.css';\n\nconst initialState = {\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    password: '',\n    teams: []\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n    }\n  \n  onRouteChange = (route) => {\n    this.setState({route: route});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <img src= { logo } alt='logo' />\n      { this.state.route === 'signin' ? <SignIn onRouteChange={this.onRouteChange} /> :\n         (this.state.route === 'create' ? <CreateTeam /> : \n          (this.state.route === 'register' ? <Register /> : null)\n         )\n      }\n     </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}